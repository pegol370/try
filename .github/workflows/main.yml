name: Build Orbit Dash for All Platforms

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-electron:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies and build Electron app
      run: |
        npm init -y
        npm install electron electron-builder --save-dev
        
        # Create minimal Electron main.js
        cat > main.js << 'EOL'
const { app, BrowserWindow } = require('electron');
const path = require('path');

function createWindow() {
  const win = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true
    }
  });
  win.loadFile('index.html');
  win.setMenuBarVisibility(false);
}

app.whenReady().then(createWindow);
app.on('window-all-closed', () => { if (process.platform !== 'darwin') app.quit(); });
app.on('activate', () => { if (BrowserWindow.getAllWindows().length === 0) createWindow(); });
EOL

        # Update package.json for Electron builder
        npm pkg set 'main=main.js'
        npm pkg set 'scripts.build=electron-builder'
        npm pkg set 'build.appId=com.orbitdash.game'
        npm pkg set 'build.productName=Orbit Dash'
        npm pkg set 'build.directories.output=dist'
        npm pkg set 'build.files[0]=index.html'
        npm pkg set 'build.files[1]=main.js'
        npm pkg set 'build.files[2]=package.json'
        
        # Platform-specific config
        if [ "$RUNNER_OS" == "Windows" ]; then
          npm pkg set 'build.win.target=nsis'
        elif [ "$RUNNER_OS" == "Linux" ]; then
          npm pkg set 'build.linux.target=AppImage'
        elif [ "$RUNNER_OS" == "macOS" ]; then
          npm pkg set 'build.mac.target=dmg'
        fi

    - name: Build Electron app
      run: npx electron-builder --publish=never
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: orbit-dash-${{ matrix.os }}
        path: dist/

  build-android:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Create Android project structure
      run: |
        mkdir -p android-app/app/src/main/assets
        cp index.html android-app/app/src/main/assets/
        
        # Create minimal Android project files
        cat > android-app/build.gradle << 'EOL'
plugins { id 'com.android.application' }
android {
    compileSdk 34
    defaultConfig {
        applicationId "com.orbitdash.game"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release { minifyEnabled false }
    }
}
dependencies { implementation 'androidx.webkit:webkit:1.6.1' }
EOL

        cat > android-app/app/build.gradle << 'EOL'
plugins { id 'com.android.application' }
android {
    compileSdk 34
    defaultConfig {
        applicationId "com.orbitdash.game"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release { minifyEnabled false }
    }
}
dependencies { implementation 'androidx.webkit:webkit:1.6.1' }
EOL

        # Create Android manifest
        mkdir -p android-app/app/src/main/res/xml
        cat > android-app/app/src/main/AndroidManifest.xml << 'EOL'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.orbitdash.game">
    <uses-permission android:name="android.permission.INTERNET" />
    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="Orbit Dash"
        android:theme="@style/Theme.AppCompat.Light">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:configChanges="orientation|screenSize">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
EOL

        # Create main activity
        mkdir -p android-app/app/src/main/java/com/orbitdash/game
        cat > android-app/app/src/main/java/com/orbitdash/game/MainActivity.java << 'EOL'
package com.orbitdash.game;
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.webkit.WebSettings;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        WebView webView = new WebView(this);
        webView.setWebViewClient(new WebViewClient());
        WebSettings settings = webView.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setDomStorageEnabled(true);
        webView.loadUrl("file:///android_asset/index.html");
        setContentView(webView);
    }
}
EOL

    - name: Build Android APK
      run: |
        cd android-app
        chmod +x ./gradlew
        ./gradlew assembleDebug
      
    - name: Upload Android APK
      uses: actions/upload-artifact@v4
      with:
        name: orbit-dash-android
        path: android-app/app/build/outputs/apk/debug/app-debug.apk

  build-ios:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: actions/setup-xcode@v2
      with:
        xcode-version: '15.2'

    - name: Create iOS project
      run: |
        mkdir -p OrbitDashIOS/OrbitDashIOS
        cp index.html OrbitDashIOS/OrbitDashIOS/
        
        cat > OrbitDashIOS/OrbitDashIOS/OrbitDashIOSApp.swift << 'EOL'
import SwiftUI
import WebKit

@main
struct OrbitDashIOSApp: App {
    var body: some Scene {
        WindowGroup {
            WebViewWrapper()
        }
    }
}

struct WebViewWrapper: UIViewRepresentable {
    func makeUIView(context: Context) -> WKWebView {
        let webView = WKWebView()
        if let url = Bundle.main.url(forResource: "index", withExtension: "html") {
            webView.loadFileURL(url, allowingReadAccessTo: url.deletingLastPathComponent())
        }
        return webView
    }
    
    func updateUIView(_ uiView: WKWebView, context: Context) {}
}
EOL

        cat > OrbitDashIOS/Package.swift << 'EOL'
// swift-tools-version:5.5
import PackageDescription

let package = Package(
    name: "OrbitDashIOS",
    platforms: [.iOS(.v15)],
    products: [
        .executable(name: "OrbitDashIOS", targets: ["OrbitDashIOS"])
    ],
    targets: [
        .executableTarget(
            name: "OrbitDashIOS",
            dependencies: [],
            resources: [.process("index.html")]
        )
    ]
)
EOL

    - name: Build iOS app
      run: |
        cd OrbitDashIOS
        xcodebuild build -scheme OrbitDashIOS -destination 'generic/platform=iOS' -derivedDataPath build

    - name: Package iOS app
      run: |
        cd OrbitDashIOS
        mkdir -p output
        cp -R build/Build/Products/Debug-iphoneos/OrbitDashIOS.app output/
        zip -r OrbitDashIOS.zip output/

    - name: Upload iOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: orbit-dash-ios
        path: OrbitDashIOS/OrbitDashIOS.zip

  package-all:
    runs-on: ubuntu-latest
    needs: [build-electron, build-android, build-ios]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: orbit-dash-*
        merge-multiple: true
        
    - name: Create final zip package
      run: |
        mkdir -p orbit-dash-package
        cp -r artifacts/* orbit-dash-package/
        zip -r orbit-dash-all-platforms.zip orbit-dash-package/
        
    - name: Upload final package
      uses: actions/upload-artifact@v4
      with:
        name: orbit-dash-all-platforms
        path: orbit-dash-all-platforms.zip
