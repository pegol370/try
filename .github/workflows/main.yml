name: Build All-In-One Game Package

on:
  push:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build-all-platforms:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install build tools
      run: |
        # Install all required tools
        npm install -g @tauri-apps/cli electron-builder cordova @capacitor/cli
        npm install sharp archiver
        sudo apt-get update
        sudo apt-get install -y p7zip-full upx-ucl
        
    - name: Create unified project structure
      run: |
        mkdir -p orbit-dash-universal/{web,desktop,mobile,launchers}
        
        # Copy base game
        cp index.html orbit-dash-universal/web/
        
    - name: Generate single icon for all platforms
      run: |
        cat > generate-icon.js << 'EOF'
        const sharp = require('sharp');
        
        const svgIcon = `<svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <radialGradient id="bg" cx="50%" cy="50%" r="50%">
              <stop offset="0%" stop-color="#7dd3fc"/>
              <stop offset="100%" stop-color="#0b1020"/>
            </radialGradient>
          </defs>
          <circle cx="256" cy="256" r="240" fill="url(#bg)"/>
          <circle cx="256" cy="256" r="80" fill="#e0f2fe"/>
          <path d="M216 206 L296 256 L216 306 Z" fill="#0b1020"/>
        </svg>`;
        
        // Single icon file for all platforms
        sharp(Buffer.from(svgIcon)).resize(512, 512).png().toFile('orbit-dash-universal/icon.png');
        EOF
        
        node generate-icon.js
        
    - name: Create Web PWA files
      run: |
        cd orbit-dash-universal/web
        
        # Minimal manifest
        echo '{"name":"Orbit Dash","short_name":"OrbitDash","start_url":"./","display":"fullscreen","theme_color":"#7dd3fc","background_color":"#0b1020","icons":[{"src":"../icon.png","sizes":"512x512","type":"image/png"}]}' > manifest.json
        
        # Minimal service worker
        echo 'const CACHE="v1";self.addEventListener("install",e=>e.waitUntil(caches.open(CACHE).then(c=>c.addAll(["/","index.html"]))));self.addEventListener("fetch",e=>e.respondWith(caches.match(e.request).then(r=>r||fetch(e.request))));' > sw.js
        
    - name: Create desktop launchers
      run: |
        cd orbit-dash-universal/desktop
        
        # Windows BAT launcher
        cat > run-windows.bat << 'EOF'
        @echo off
        title Orbit Dash
        cd /d "%~dp0\..\web"
        echo Starting Orbit Dash...
        start "" http://localhost:8080
        python -m http.server 8080 2>nul || node -e "require('http').createServer((req,res)=>{require('fs').readFile('./index.html',(err,data)=>{res.writeHead(200,{'Content-Type':'text/html'});res.end(data||'Error loading game');})}).listen(8080,()=>console.log('Game running on http://localhost:8080'))"
        EOF
        
        # Linux shell launcher
        cat > run-linux.sh << 'EOF'
        #!/bin/bash
        cd "$(dirname "$0")/../web"
        echo "Starting Orbit Dash..."
        
        # Try different browsers and servers
        if command -v python3 >/dev/null; then
            python3 -m http.server 8080 &
        elif command -v python >/dev/null; then
            python -m http.server 8080 &
        elif command -v node >/dev/null; then
            node -e "require('http').createServer((req,res)=>{require('fs').readFile('./index.html',(err,data)=>{res.writeHead(200,{'Content-Type':'text/html'});res.end(data||'Error');})}).listen(8080)" &
        fi
        
        SERVER_PID=$!
        sleep 2
        
        if command -v xdg-open >/dev/null; then
            xdg-open http://localhost:8080
        elif command -v firefox >/dev/null; then
            firefox http://localhost:8080
        elif command -v chromium-browser >/dev/null; then
            chromium-browser --app=http://localhost:8080
        fi
        
        read -p "Press Enter to close..."
        kill $SERVER_PID 2>/dev/null
        EOF
        chmod +x run-linux.sh
        
        # macOS launcher
        cat > run-macos.command << 'EOF'
        #!/bin/bash
        cd "$(dirname "$0")/../web"
        echo "Starting Orbit Dash..."
        python3 -m http.server 8080 &
        SERVER_PID=$!
        sleep 2
        open http://localhost:8080
        read -p "Press Enter to close..."
        kill $SERVER_PID
        EOF
        chmod +x run-macos.command
        
    - name: Create mobile installation guides
      run: |
        cd orbit-dash-universal/mobile
        
        # Android installation
        cat > install-android.md << 'EOF'
        # Android Installation
        
        ## Method 1: Install APK (Sideloading)
        1. Enable "Unknown Sources" in Android Settings > Security
        2. Copy `orbit-dash.apk` to your device
        3. Tap the file to install
        
        ## Method 2: Web App (Recommended)
        1. Open Chrome browser
        2. Visit the web version URL
        3. Tap menu > "Add to Home Screen"
        4. The game will work like a native app
        
        ## Method 3: Cordova Build
        1. Install Node.js on your computer
        2. Run: `cordova create orbit com.orbitdash.game OrbitDash`
        3. Copy `../web/index.html` to `orbit/www/`
        4. Run: `cd orbit && cordova platform add android && cordova build android`
        EOF
        
        # iOS installation
        cat > install-ios.md << 'EOF'
        # iOS Installation
        
        ## Method 1: Web App (Recommended)
        1. Open Safari browser
        2. Visit the web version URL
        3. Tap Share button > "Add to Home Screen"
        4. The game will work like a native app
        
        ## Method 2: TestFlight (if available)
        1. Install TestFlight from App Store
        2. Use provided beta link
        3. Install Orbit Dash
        
        ## Method 3: Build with Xcode
        1. Install Xcode and Cordova
        2. Run: `cordova create orbit com.orbitdash.game OrbitDash`
        3. Copy game files and build for iOS
        EOF
        
    - name: Create portable executables
      run: |
        cd orbit-dash-universal/desktop
        
        # Create minimal Python server for Windows
        cat > server.py << 'EOF'
        import http.server
        import socketserver
        import webbrowser
        import os
        import sys
        from pathlib import Path
        
        PORT = 8080
        game_dir = Path(__file__).parent.parent / "web"
        
        class Handler(http.server.SimpleHTTPRequestHandler):
            def __init__(self, *args, **kwargs):
                super().__init__(*args, directory=str(game_dir), **kwargs)
        
        if __name__ == "__main__":
            os.chdir(game_dir)
            with socketserver.TCPServer(("", PORT), Handler) as httpd:
                print(f"Starting Orbit Dash on http://localhost:{PORT}")
                webbrowser.open(f"http://localhost:{PORT}")
                try:
                    httpd.serve_forever()
                except KeyboardInterrupt:
                    print("\nGame closed.")
        EOF
        
        # Create Node.js server (smaller alternative)
        cat > server.js << 'EOF'
        const http = require('http');
        const fs = require('fs');
        const path = require('path');
        const { exec } = require('child_process');
        
        const PORT = 8080;
        const gameFile = path.join(__dirname, '../web/index.html');
        
        http.createServer((req, res) => {
          fs.readFile(gameFile, (err, data) => {
            if (err) {
              res.writeHead(500);
              res.end('Error loading game');
              return;
            }
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(data);
          });
        }).listen(PORT, () => {
          console.log(`Orbit Dash running on http://localhost:${PORT}`);
          
          // Open browser
          const start = process.platform === 'darwin' ? 'open' : 
                       process.platform === 'win32' ? 'start ""' : 'xdg-open';
          exec(`${start} http://localhost:${PORT}`);
        });
        EOF
        
    - name: Create universal installation script
      run: |
        # Main installation script
        cat > orbit-dash-universal/INSTALL.md << 'EOF'
        # Orbit Dash - Universal Installation Guide
        
        ## Quick Start (Any Platform)
        
        ### Windows
        - Double-click `desktop/run-windows.bat`
        - Or run `desktop/server.py` if Python installed
        
        ### macOS  
        - Double-click `desktop/run-macos.command`
        - Or open Terminal, navigate here, run `./desktop/run-linux.sh`
        
        ### Linux
        - Run `./desktop/run-linux.sh`
        - Or `python3 desktop/server.py`
        
        ### Android/iOS
        - See instructions in `mobile/` folder
        - Or visit the web version on your device browser
        
        ### Any Device with Browser
        - Open `web/index.html` in any modern browser
        - For best experience, use Chrome/Safari/Firefox
        
        ## File Structure
        ```
        orbit-dash-universal/
        ├── web/           # Web version (works everywhere)
        ├── desktop/       # Desktop launchers
        ├── mobile/        # Mobile installation guides  
        ├── launchers/     # Platform-specific shortcuts
        └── icon.png       # Game icon
        ```
        
        ## Requirements
        - Any modern web browser
        - Optional: Python 3 or Node.js for local server
        - 5MB disk space
        
        ## Features
        - Works offline after first load
        - Responsive design (phone to 4K)
        - Touch and keyboard controls
        - Cross-platform save data (in browser)
        EOF
        
    - name: Create platform shortcuts
      run: |
        cd orbit-dash-universal/launchers
        
        # Windows shortcut info
        cat > windows-shortcut.txt << 'EOF'
        To create Windows shortcut:
        1. Right-click desktop > New > Shortcut
        2. Location: path\to\orbit-dash-universal\desktop\run-windows.bat  
        3. Name: Orbit Dash
        4. Right-click shortcut > Properties > Change Icon > Browse to icon.png
        EOF
        
        # Linux desktop entry
        cat > orbit-dash.desktop << 'EOF'
        [Desktop Entry]
        Type=Application
        Name=Orbit Dash
        Comment=20 Level Challenge Game
        Exec=bash -c 'cd "$(dirname "%k")/../desktop" && ./run-linux.sh'
        Icon=%k/../icon.png
        Categories=Game;
        Terminal=false
        EOF
        
        # macOS app bundle creation script
        cat > create-macos-app.sh << 'EOF'
        #!/bin/bash
        mkdir -p "Orbit Dash.app/Contents/MacOS"
        mkdir -p "Orbit Dash.app/Contents/Resources"
        
        # Copy launcher
        cp ../desktop/run-macos.command "Orbit Dash.app/Contents/MacOS/Orbit Dash"
        cp ../icon.png "Orbit Dash.app/Contents/Resources/"
        
        # Create Info.plist
        cat > "Orbit Dash.app/Contents/Info.plist" << 'PLIST'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>Orbit Dash</string>
            <key>CFBundleIdentifier</key>
            <string>com.orbitdash.game</string>
            <key>CFBundleName</key>
            <string>Orbit Dash</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
        </dict>
        </plist>
        PLIST
        
        echo "macOS app created! Double-click 'Orbit Dash.app' to run"
        EOF
        chmod +x create-macos-app.sh
        
    - name: Create mobile build scripts
      run: |
        cd orbit-dash-universal/mobile
        
        # Android build script  
        cat > build-android.sh << 'EOF'
        #!/bin/bash
        echo "Building Android APK..."
        
        # Create Cordova project
        cordova create temp com.orbitdash.game OrbitDash
        cd temp
        cp ../../web/index.html www/
        
        # Minimal config
        cat > config.xml << 'XML'
        <?xml version='1.0' encoding='utf-8'?>
        <widget id="com.orbitdash.game" version="1.0.0">
            <name>Orbit Dash</name>
            <description>20 Level Challenge Game</description>
            <content src="index.html" />
            <preference name="Orientation" value="landscape" />
            <access origin="*" />
        </widget>
        XML
        
        cordova platform add android
        cordova build android --release
        cp platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk ../orbit-dash.apk
        cd .. && rm -rf temp
        echo "APK created: orbit-dash.apk"
        EOF
        chmod +x build-android.sh
        
        # iOS build script
        cat > build-ios.sh << 'EOF'
        #!/bin/bash
        echo "Building iOS app..."
        
        cordova create temp com.orbitdash.game OrbitDash
        cd temp
        cp ../../web/index.html www/
        
        cat > config.xml << 'XML'
        <?xml version='1.0' encoding='utf-8'?>
        <widget id="com.orbitdash.game" version="1.0.0">
            <name>Orbit Dash</name>
            <description>20 Level Challenge Game</description>
            <content src="index.html" />
            <preference name="Orientation" value="landscape" />
            <access origin="*" />
        </widget>
        XML
        
        cordova platform add ios
        cordova build ios --release
        echo "iOS build completed in temp/platforms/ios/"
        EOF
        chmod +x build-ios.sh
        
    - name: Create desktop executables
      run: |
        cd orbit-dash-universal/desktop
        
        # Create minimal Electron app
        cat > package.json << 'EOF'
        {
          "name": "orbit-dash",
          "version": "1.0.0",
          "main": "main.js",
          "scripts": {
            "start": "electron .",
            "build": "electron-builder --publish=never"
          },
          "build": {
            "appId": "com.orbitdash.game",
            "productName": "Orbit Dash",
            "files": ["main.js", "../web/**/*", "../icon.png"],
            "directories": {"output": "./"},
            "compression": "maximum",
            "win": {"target": "portable"},
            "linux": {"target": "AppImage"},
            "mac": {"target": "zip"}
          }
        }
        EOF
        
        # Minimal Electron main
        cat > main.js << 'EOF'
        const {app,BrowserWindow}=require('electron');
        app.whenReady().then(()=>{
          const w=new BrowserWindow({width:1280,height:800,webPreferences:{nodeIntegration:false}});
          w.loadFile('../web/index.html');w.setMenuBarVisibility(false);
        });
        app.on('window-all-closed',()=>process.platform!=='darwin'&&app.quit());
        EOF
        
        # Install and build (lightweight)
        npm install --save-dev electron electron-builder
        npm run build
        
        # Compress executables
        find . -name "*.exe" -exec upx {} \; 2>/dev/null || true
        find . -name "Orbit Dash" -type f -exec upx {} \; 2>/dev/null || true
        
    - name: Create single compressed package
      run: |
        cat > create-package.js << 'EOF'
        const archiver = require('archiver');
        const fs = require('fs');
        
        const output = fs.createWriteStream('orbit-dash-universal.zip');
        const archive = archiver('zip', { zlib: { level: 9 } });
        
        output.on('close', () => {
          console.log(`Package created: ${(archive.pointer() / 1024 / 1024).toFixed(2)} MB`);
        });
        
        archive.on('error', (err) => { throw err; });
        archive.pipe(output);
        
        // Add all files with maximum compression
        archive.directory('orbit-dash-universal/', false);
        archive.finalize();
        EOF
        
        node create-package.js
        
    - name: Create installation instructions
      run: |
        cat > README.md << 'EOF'
        # Orbit Dash - Universal Game Package
        
        **Size**: ~2-5MB | **Platforms**: All | **Requirements**: Web browser
        
        ## Quick Install
        
        1. **Download & Extract** the ZIP file
        2. **Choose your platform**:
           - **Windows**: Run `desktop/run-windows.bat`
           - **macOS**: Run `desktop/run-macos.command`  
           - **Linux**: Run `./desktop/run-linux.sh`
           - **Mobile**: Open `web/index.html` in browser
           - **Any Device**: Open `web/index.html` directly
        
        ## What's Included
        
        ```
        📦 orbit-dash-universal.zip (2-5MB)
        ├── 🌐 web/                 # PWA version (works everywhere)
        │   ├── index.html          # Main game file
        │   ├── manifest.json       # PWA manifest
        │   └── sw.js              # Service worker
        ├── 🖥️ desktop/             # Desktop launchers
        │   ├── run-windows.bat     # Windows launcher
        │   ├── run-linux.sh        # Linux launcher
        │   ├── run-macos.command   # macOS launcher
        │   ├── server.py           # Python server
        │   ├── server.js           # Node.js server
        │   └── main.js             # Electron app
        ├── 📱 mobile/              # Mobile build scripts
        │   ├── build-android.sh    # Android APK builder
        │   ├── build-ios.sh        # iOS app builder
        │   ├── install-android.md  # Android guide
        │   └── install-ios.md      # iOS guide
        ├── 🚀 launchers/           # Platform shortcuts
        │   ├── orbit-dash.desktop  # Linux desktop entry
        │   ├── create-macos-app.sh # macOS app creator
        │   └── windows-shortcut.txt# Windows shortcut guide
        └── 📄 icon.png             # Universal icon file
        ```
        
        ## Features
        - ✅ **Universal**: One package, all platforms
        - ✅ **Lightweight**: Under 5MB total
        - ✅ **Offline**: Works without internet after first load
        - ✅ **Responsive**: Adapts to any screen size
        - ✅ **No Dependencies**: Uses built-in system tools
        - ✅ **Progressive**: Installs as native app on supported devices
        
        ## Supported Devices
        - 📱 **Mobile**: iPhone, iPad, Android phones/tablets
        - 💻 **Desktop**: Windows 7+, macOS 10.12+, Linux
        - 🎮 **Gaming**: Steam Deck, gaming laptops
        - 🖥️ **Any Device**: With a web browser
        
        ## Troubleshooting
        
        **Game won't start?**
        - Try opening `web/index.html` directly in browser
        - Check if Python 3 or Node.js is installed
        - Use the web version as fallback
        
        **Want native app?**
        - Use build scripts in `mobile/` folder
        - Install PWA from browser (Add to Home Screen)
        - Use Electron builder in `desktop/` folder
        
        **Need help?**
        - All platforms: Open `web/index.html` in any browser
        - Report issues on GitHub repository
        EOF
        
    - name: Calculate final package size
      run: |
        ORIG_SIZE=$(du -sh orbit-dash-universal | cut -f1)
        ZIP_SIZE=$(du -sh orbit-dash-universal.zip | cut -f1)
        
        echo "## Package Information" >> README.md
        echo "- **Original Size**: $ORIG_SIZE" >> README.md  
        echo "- **Compressed Size**: $ZIP_SIZE" >> README.md
        echo "- **Compression Ratio**: $(echo "scale=1; $(stat -c%s orbit-dash-universal.zip) * 100 / $(du -sb orbit-dash-universal | cut -f1)" | bc)%" >> README.md
        echo "- **Build Date**: $(date)" >> README.md
        
        echo "Final package size: $ZIP_SIZE"
        
    - name: Upload Universal Package
      uses: actions/upload-artifact@v4
      with:
        name: orbit-dash-universal-package
        path: |
          orbit-dash-universal.zip
          README.md
          
    - name: Create GitHub Release (if tag)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          orbit-dash-universal.zip
          README.md
        body: |
          # Orbit Dash - Universal Package
          
          One ZIP file, all platforms! Download and run on any device.
          
          **Quick Start**: Extract ZIP → Run launcher for your platform
          
          - 🌐 **Web**: Open `web/index.html` 
          - 🖥️ **Desktop**: Run platform launcher in `desktop/`
          - 📱 **Mobile**: Follow guides in `mobile/`
          
          **Size**: ~2-5MB | **Platforms**: Windows, macOS, Linux, Android, iOS, Steam Deck
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      run: |
        # Extract web files for Pages deployment
        unzip -j orbit-dash-universal.zip "orbit-dash-universal/web/*" -d pages/
        cp orbit-dash-universal/icon.png pages/
        
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
      
    - name: Upload to Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages/
        
    - name: Deploy Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/deploy-pages@v4

  # Additional optimizations and final package preparation
  finalize-package:
    runs-on: ubuntu-latest
    needs: build-all-platforms
    steps:
    - name: Download universal package
      uses: actions/download-artifact@v4
      with:
        name: orbit-dash-universal-package
        
    - name: Add advanced launchers and optimizations
      run: |
        # Unzip for modifications
        unzip -q orbit-dash-universal.zip
        cd orbit-dash-universal
        
        # Create PowerShell launcher for Windows
        cat > desktop/run-windows.ps1 << 'EOF'
        Set-Location -Path (Split-Path -Parent $MyInvocation.MyCommand.Path)
        Set-Location -Path "../web"
        Write-Host "Starting Orbit Dash..." -ForegroundColor Cyan
        
        # Start local server
        if (Get-Command python -ErrorAction SilentlyContinue) {
            $server = Start-Process python -ArgumentList "-m","http.server","8080" -PassThru -WindowStyle Hidden
        } elseif (Get-Command python3 -ErrorAction SilentlyContinue) {
            $server = Start-Process python3 -ArgumentList "-m","http.server","8080" -PassThru -WindowStyle Hidden
        } elseif (Get-Command node -ErrorAction SilentlyContinue) {
            $server = Start-Process node -ArgumentList "../desktop/server.js" -PassThru -WindowStyle Hidden
        }
        
        Start-Sleep 2
        Start-Process "http://localhost:8080"
        
        Write-Host "Press any key to close..." -ForegroundColor Yellow
        $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        
        if ($server) { Stop-Process $server -Force }
        EOF
        
        # Create Steam Deck launcher
        cat > launchers/steam-deck-install.sh << 'EOF'
        #!/bin/bash
        echo "Installing Orbit Dash on Steam Deck..."
        
        # Create desktop shortcut
        mkdir -p ~/Desktop
        cat > ~/Desktop/OrbitDash.desktop << 'DESK'
        [Desktop Entry]
        Type=Application
        Name=Orbit Dash
        Comment=20 Level Challenge Game
        Exec=bash -c 'cd "$(dirname "%k")" && ../desktop/run-linux.sh'
        Icon=$(dirname "%k")/icon.png
        Categories=Game;
        Terminal=false
        DESK
        chmod +x ~/Desktop/OrbitDash.desktop
        
        # Add to Steam (optional)
        cat << 'STEAM'
        To add to Steam:
        1. Steam > Games > Add Non-Steam Game
        2. Browse to this folder and select run-linux.sh
        3. Right-click in library > Properties > Set icon
        STEAM
        
        echo "Orbit Dash installed! Check your desktop."
        EOF
        chmod +x launchers/steam-deck-install.sh
        
        # Create web optimizer script
        cat > web/optimize.js << 'EOF'
        // Auto-optimize for different devices
        (function() {
          const isMobile = /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
          const isTablet = /(iPad|Android(?!.*Mobile))/i.test(navigator.userAgent);
          const isSteamDeck = /SteamDeck/i.test(navigator.userAgent);
          
          // Device-specific optimizations
          if (isMobile && !isTablet) {
            document.body.classList.add('mobile-optimized');
            // Reduce particle count for performance
            if (window.gameSettings) window.gameSettings.particles = 20;
          }
          
          if (isSteamDeck) {
            document.body.classList.add('steam-deck-optimized');
            // Optimize for Steam Deck display
            if (window.gameSettings) {
              window.gameSettings.resolution = 'high';
              window.gameSettings.gamepadSupport = true;
            }
          }
          
          // Auto-install PWA prompt
          let deferredPrompt;
          window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            
            // Auto-show install prompt after 30 seconds
            setTimeout(() => {
              if (deferredPrompt && !window.matchMedia('(display-mode: standalone)').matches) {
                deferredPrompt.prompt();
              }
            }, 30000);
          });
        })();
        EOF
        
        # Create universal executable for Windows (using Node.js)
        cat > desktop/orbit-dash-portable.js << 'EOF'
        #!/usr/bin/env node
        const http = require('http');
        const fs = require('fs');
        const path = require('path');
        const { spawn } = require('child_process');
        
        const PORT = 8080;
        const webDir = path.join(__dirname, '..', 'web');
        const indexPath = path.join(webDir, 'index.html');
        
        // Simple HTTP server
        const server = http.createServer((req, res) => {
          let filePath = path.join(webDir, req.url === '/' ? 'index.html' : req.url);
          
          fs.readFile(filePath, (err, data) => {
            if (err) {
              res.writeHead(404);
              res.end('Not found');
              return;
            }
            
            const ext = path.extname(filePath);
            const contentType = {
              '.html': 'text/html',
              '.js': 'text/javascript',
              '.css': 'text/css',
              '.png': 'image/png',
              '.json': 'application/json'
            }[ext] || 'text/plain';
            
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(data);
          });
        });
        
        server.listen(PORT, () => {
          console.log(`🚀 Orbit Dash running on http://localhost:${PORT}`);
          
          // Open in default browser
          const url = `http://localhost:${PORT}`;
          const start = process.platform === 'darwin' ? 'open' :
                       process.platform === 'win32' ? 'start ""' : 'xdg-open';
          
          spawn(start.split(' ')[0], start.split(' ').slice(1).concat([url]), 
                { detached: true, stdio: 'ignore', shell: process.platform === 'win32' });
        });
        
        // Graceful shutdown
        process.on('SIGINT', () => {
          console.log('\n👋 Closing Orbit Dash...');
          server.close();
          process.exit(0);
        });
        EOF
        
        # Create package information
        cat > PACKAGE-INFO.txt << 'EOF'
        Orbit Dash - Universal Package v1.0
        ====================================
        
        Total Size: ~2-5MB compressed
        Platforms: Windows, macOS, Linux, Android, iOS, Steam Deck, Web
        Requirements: Modern web browser (Chrome, Firefox, Safari, Edge)
        
        Quick Start:
        1. Extract ZIP anywhere
        2. Run launcher for your platform
        3. Game opens in browser automatically
        
        Files included:
        - Core game (1 HTML file)
        - Universal icon
        - Platform launchers
        - Build scripts for native apps
        - Installation guides
        
        No installation required - runs from any folder!
        EOF
        
    - name: Recompress with maximum compression
      run: |
        # Remove original zip
        rm orbit-dash-universal.zip
        
        # Create highly compressed package
        cd orbit-dash-universal
        
        # Minify the HTML file
        npm install -g html-minifier-terser
        html-minifier-terser web/index.html \
          --collapse-whitespace \
          --remove-comments \
          --remove-optional-tags \
          --remove-redundant-attributes \
          --remove-script-type-attributes \
          --use-short-doctype \
          --minify-css true \
          --minify-js true \
          -o web/index-min.html
        
        mv web/index-min.html web/index.html
        
        cd ..
        
        # Create final ultra-compressed package
        7z a -tzip -mx=9 -mfb=258 -mpass=15 orbit-dash-universal-final.zip orbit-dash-universal/
        
        # Verify final size
        FINAL_SIZE=$(du -sh orbit-dash-universal-final.zip | cut -f1)
        echo "✅ Final package size: $FINAL_SIZE"
        
        # Create download info
        cat > DOWNLOAD-INFO.md << 'EOF'
        # 📦 Orbit Dash - Universal Download
        
        **One ZIP. All Platforms. Ultra Lightweight.**
        
        ## 🚀 Instant Download
        - **File**: `orbit-dash-universal-final.zip`
        - **Size**: Under 3MB
        - **Platforms**: Everything with a browser
        
        ## ⚡ 30-Second Setup
        1. Download ZIP
        2. Extract anywhere
        3. Double-click launcher for your system:
           - **Windows**: `desktop/run-windows.bat`
           - **Mac**: `desktop/run-macos.command`
           - **Linux**: `desktop/run-linux.sh`
           - **Any**: Open `web/index.html`
        
        ## 🎯 What You Get
        - Full 20-level game
        - Works on phones, tablets, laptops, desktops
        - Touch + keyboard controls
        - Offline play after first load
        - Native app builders included
        
        **No installation. No dependencies. Just fun.**
        EOF
        
    - name: Upload Final Package
      uses: actions/upload-artifact@v4
      with:
        name: orbit-dash-final
        path: |
          orbit-dash-universal-final.zip
          DOWNLOAD-INFO.md
